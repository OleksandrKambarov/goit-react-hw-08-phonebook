{"version":3,"file":"static/js/669.85707a5a.chunk.js","mappings":"8OAGaA,EAAW,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,MAAhB,E,2BCDhBC,EAAWC,EAAAA,EAAAA,IAAH,+IASRC,EAAeD,EAAAA,EAAAA,IAAH,8Y,SCHnBE,EAAYC,SAASC,cAAc,eAiCzC,EA/Bc,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACTC,GAAWC,EAAAA,EAAAA,MAQXC,EAAgB,SAAAC,GACD,WAAfA,EAAMC,MACRJ,GAASK,EAAAA,EAAAA,IAAe,GAE3B,EAUD,OARAC,EAAAA,EAAAA,YAAU,WAER,OADAC,OAAOC,iBAAiB,UAAWN,GAC5B,WACLK,OAAOE,oBAAoB,UAAWP,EACvC,CAEF,GAAE,KAEIQ,EAAAA,EAAAA,eACL,SAACjB,EAAD,CAAUkB,QArBgB,SAAAR,GACtBA,EAAMS,gBAAkBT,EAAMU,QAChCb,GAASK,EAAAA,EAAAA,IAAe,GAE3B,EAiBC,UACE,SAACV,EAAD,CAAcmB,UAAU,eAAxB,SAAwCf,MAE1CH,EAEH,E,SCrCYmB,EAAOrB,EAAAA,EAAAA,KAAH,gMAWJsB,EAAQtB,EAAAA,EAAAA,MAAH,0EAMLuB,EAASvB,EAAAA,EAAAA,OAAH,yVCwEnB,EA9EoB,WAClB,OAAwBwB,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACMtB,GAAWC,EAAAA,EAAAA,MAoCjB,OACE,+BACE,UAACc,EAAD,CAAMQ,aAAa,MAAMC,SA3BR,SAAAC,GACnBA,EAAEC,iBAmBFN,EAAQ,IACRE,EAAU,IACVtB,GAASK,EAAAA,EAAAA,IAAe,GACzB,EAIG,WACE,UAACW,EAAD,CAAOW,QAAQ,OAAf,WACE,kCACA,kBACEC,KAAK,OACLC,GAAG,OACHV,KAAK,OACLW,MAAOX,EACPY,SA1CS,SAAAN,GACjBL,EAAQK,EAAEb,cAAckB,MACzB,EAyCSE,UAAQ,QAGZ,mBACA,UAAChB,EAAD,CAAOW,QAAQ,SAAf,WACE,oCACA,kBACEC,KAAK,MACLC,GAAG,SACHV,KAAK,SACLc,QAAQ,yFACRH,MAAOT,EACPU,SApDW,SAAAN,GACnBH,EAAUG,EAAEb,cAAckB,MAC3B,EAmDSE,UAAQ,QAGZ,mBACA,SAACf,EAAD,CACEW,KAAK,SADP,6BAUP,ECxFYM,EAAaxC,EAAAA,EAAAA,IAAH,mFAMVyC,EAAezC,EAAAA,EAAAA,IAAH,wDAKZ0C,EAAa1C,EAAAA,EAAAA,IAAH,yHAOV2C,EAAO3C,EAAAA,EAAAA,IAAH,mEAKJuB,EAASvB,EAAAA,EAAAA,OAAH,qYAmBN4C,EAAc5C,EAAAA,EAAAA,OAAH,yVCiBxB,EAxCqB,WAEnB,IAAM6C,GAAYC,EAAAA,EAAAA,IAAYnD,GACxBW,GAAWC,EAAAA,EAAAA,MACXwC,EAAc,WAClBzC,GAASK,EAAAA,EAAAA,IAAgBkC,GAC1B,EACH,OACE,+BACE,UAACF,EAAD,YACE,uCACA,SAACF,EAAD,WACE,SAAC,EAAD,CAAQP,KAAK,SAASjB,QAAS8B,EAA/B,2BAIDF,IACC,SAAC,EAAD,WACE,SAACH,EAAD,WACE,UAACF,EAAD,YACE,SAACI,EAAD,CAAaV,KAAK,SAASjB,QAAS8B,EAApC,oBAGA,SAAC,EAAD,eAgBb,C","sources":["redux/selectors.js","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","views/ContactsView.styled.jsx","views/ContactsView.js"],"sourcesContent":["// export const getContacts = state => state.contacts.data;\n\n// export const getFilter = state => state.filters.value;\nexport const getModal = state => state.modal.status;","import styled from '@emotion/styled';\n\nexport const Backdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vw;\n  background-color: rgba(0, 0, 0, 0.5);\n`;\n\nexport const ModalContent = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  padding: 12px;\n  background-color: #fff;\n  border-radius: 3px;\n  box-shadow: 0px 2px 1px, -1px, rgba(0, 0, 0, 0.2), 0px 1px 1px, 0px,\n    rgba(0, 0, 0, 0.14), 0px 1px 3px, 0px, rgba(0, 0, 0, 0.12);\n\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  align-items: center;\n`;\n","import { createPortal } from 'react-dom';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { setStatusModal } from 'redux/modalSlice';\n\nimport { Backdrop, ModalContent } from './Modal.styled';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nconst Modal = ({ children }) => {\n  const dispatch = useDispatch();\n\n  const handleBackdropClick = event => {\n    if (event.currentTarget === event.target) {\n      dispatch(setStatusModal(false));\n    }\n  };\n\n  const handleKeyDown = event => {\n    if (event.code === 'Escape') {\n      dispatch(setStatusModal(false));\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  return createPortal(\n    <Backdrop onClick={handleBackdropClick}>\n      <ModalContent className=\"modalContent\">{children}</ModalContent>\n    </Backdrop>,\n    modalRoot\n  );\n};\n\nexport default Modal;\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  width: 250px;\n  align-items: flex-end;\n  border: solid 1px black;\n  display: flex;\n  flex-direction: column;\n  gap: 0px;\n  padding: 10px;\n  line-height: 0.5;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  gap: 5px;\n  line-height: 0;\n`;\n\nexport const Button = styled.button`\n  background-color: #fff;\n  color: #000;\n  padding: 2px 5px 2px 5px;\n  height: 30px;\n  border-radius: 5px;\n  border: 1px solid #000;\n  cursor: pointer;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  transition: background-color 0.2s ease-in-out;\n\n  &:hover {\n    background-color: #000;\n    color: #fff;\n  }\n`;\n","import { React, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { setStatusModal } from 'redux/modalSlice';\n// import {\n//   useCreateContactMutation,\n//   useFetchContactsQuery,\n// } from 'redux/phonebookSlice';\n\nimport { Button, Form, Label } from './ContactForm.styled';\n// import Notiflix from 'notiflix';\n// import { Spinner } from 'components/Spinner/Spinner';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  // const [createContact, { isLoading, error }] = useCreateContactMutation();\n  // const { data: contacts } = useFetchContactsQuery();\n\n  const handleName = e => {\n    setName(e.currentTarget.value);\n  };\n  const handleNumber = e => {\n    setNumber(e.currentTarget.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // const isNameExists = contacts.some(\n    //   contact => contact.name?.toLowerCase() === name.toLowerCase()\n    // );\n\n    // if (isNameExists) {\n    //   Notiflix.Notify.warning(`${name} is already in contacts`);\n    //   return;\n    // }\n\n    // createContact({ name: name, number: number });\n    // if (error) {\n    //   Notiflix.Notify.failure(error.message);\n    //   return;\n    // }\n\n    // Notiflix.Notify.success(isLoading);\n\n    setName('');\n    setNumber('');\n    dispatch(setStatusModal(false));\n  };\n\n  return (\n    <>\n      <Form autoComplete=\"off\" onSubmit={handleSubmit}>\n        <Label htmlFor=\"name\">\n          <p>Name:</p>\n          <input\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            value={name}\n            onChange={handleName}\n            required\n          />\n        </Label>\n        <br />\n        <Label htmlFor=\"number\">\n          <p>Number:</p>\n          <input\n            type=\"tel\"\n            id=\"number\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            value={number}\n            onChange={handleNumber}\n            required\n          />\n        </Label>\n        <br />\n        <Button\n          type=\"submit\"\n          // disabled={isLoading}\n        >\n          {/* {isLoading && <Spinner size={12} />} */}\n          Add Contact\n        </Button>\n      </Form>\n    </>\n  );\n};\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const ModalItems = styled.div`\n  display: flex;\n  gap: 15px;\n  flex-direction: column;\n`;\n\nexport const ContactsHead = styled.div`\n  display: flex;\n  gap: 15px;\n`;\n\nexport const ModalBlock = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nexport const Book = styled.div`\n  margin-top: 20px;\n  margin-left: 20px;\n`;\n\nexport const Button = styled.button`\n  font-size: 16px;\n  line-height: 26px;\n  background-color: #fff;\n  color: #000;\n  padding: 5px 15px 5px 15px;\n  height: 40px;\n  border-radius: 5px;\n  border: 2px solid #000;\n  cursor: pointer;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  transition: background-color 0.2s ease-in-out;\n\n  &:hover {\n    background-color: #000;\n    color: #fff;\n  }\n`;\n\nexport const CloseButton = styled.button`\n  background-color: #fff;\n  color: #000;\n  padding: 2px 5px 2px 5px;\n  height: 25px;\n  border-radius: 4px;\n  border: 1px solid #000;\n  cursor: pointer;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  transition: background-color 0.2s ease-in-out;\n\n  &:hover {\n    background-color: #000;\n    color: #fff;\n  }\n`;\n","import React from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setStatusModal } from 'redux/modalSlice';\nimport { getModal } from 'redux/selectors';\n// import { useFetchContactsQuery } from 'redux/phonebookSlice';\n// import ContactList from 'components/ContactList';\n// import { Spinner } from 'components/Spinner/Spinner';\n\nimport Modal from '../components/Modal';\nimport  ContactForm from '../components/ContactForm';\nimport {\n  Book,\n  Button,\n  CloseButton,\n  ModalBlock,\n  ModalItems,\n  ContactsHead,\n} from './ContactsView.styled';\n\n\nconst ContactsView = () => {\n//   const { data: contacts, isFetching } = useFetchContactsQuery();\n  const showModal = useSelector(getModal);\n  const dispatch = useDispatch();\n  const toggleModal = () => {\n    dispatch(setStatusModal(!showModal));\n  };\nreturn (\n  <>\n    <Book>\n      <h1>Phonebook</h1>\n      <ContactsHead>\n        <Button type=\"button\" onClick={toggleModal}>\n          Add Contact\n        </Button>\n      </ContactsHead>\n      {showModal && (\n        <Modal>\n          <ModalBlock>\n            <ModalItems>\n              <CloseButton type=\"button\" onClick={toggleModal}>\n                Close\n              </CloseButton>\n              <ContactForm />\n            </ModalItems>\n          </ModalBlock>\n        </Modal>\n      )}\n      {/* {!contacts && isFetching && (\n        <>\n          <br />\n          <Spinner />\n        </>\n      )} */}\n      {/* {contacts && <ContactList contacts={contacts} />} */}\n    </Book>\n  </>\n\n );\n};\nexport default ContactsView;\n\n"],"names":["getModal","state","modal","status","Backdrop","styled","ModalContent","modalRoot","document","querySelector","children","dispatch","useDispatch","handleKeyDown","event","code","setStatusModal","useEffect","window","addEventListener","removeEventListener","createPortal","onClick","currentTarget","target","className","Form","Label","Button","useState","name","setName","number","setNumber","autoComplete","onSubmit","e","preventDefault","htmlFor","type","id","value","onChange","required","pattern","ModalItems","ContactsHead","ModalBlock","Book","CloseButton","showModal","useSelector","toggleModal"],"sourceRoot":""}